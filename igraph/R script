# CIES2020
## This script is created by Byoung-gyu Gong (bgong7@asu.edu), 
## for vCIES2020 Workshop on Network data analysis and visualization 

# Set the directory
# If you are novice to R program setting, please don't forget to set the right
# directory. Once you set the right directory in each R session, the files
# can be easily accessed and stored in the given folder. Once you would like to 
# know the directory information of your data file, please right click the file
# and click "get info".
# This is my own directory, so you should create a folder of your own.
# It is case sensitive, so once you got the error you should check up the exact spelling.
     setwd("/Users/bgong/Documents/R programs/CIES2020/") 
     getwd() # Once you can see the same directory out of this order, you are all set to go.

install.packages("igraph")
library(igraph)
#==================================================================#
#====================== Data Pre-processing =======================#
#==================================================================#
# In this section, you will retrieve csv format network data file  #
# to the R studio as a dataframe and convert it into the igraph    #
# object.                                                          #
#==================================================================#

#1. Read data from csv files
D<-read.csv("primaryschool.csv") # Edge list
D_meta<-read.csv("metadata_primaryschool.csv") # Node list

#2. Manage dataset
B<-as.data.frame(table(D)) # Create an edge weight column named "Freq"
B1<-subset(B,Freq>0) # Delete all the edges having weight equal to 0

#3. Create an igraph object from the dataframes
Stucont<-graph_from_data_frame(B1, directed = FALSE, vertices = D_meta)
E(Stucont)$weight<-E(Stucont)$Freq # Assigning edge attribute to each edge
Stucont

#=================== Explore Your igraph Data ====================#
#1. igraph summary
Stucont
gsize(Stucont)
gorder(Stucont)

#2. Nodelist
V(Stucont)

#3. Edgelist
E(Stucont)

#4. Attributes
V(Stucont)$Gender
V(Stucont)$Gender[V(Stucont)$Gender=='Unknown'] <- NA
V(Stucont)$Class

#5. Adjacency matrix
Stucont[c(1:10),c(1:10)]

#=================== Measuring Centrality ====================#
#1. Degree centrality
Stucont_ind<-degree(Stucont,mode=c("All"))
V(Stucont)$degree<-Stucont_ind
V(Stucont)$degree
which.max(Stucont_ind)

#2. Betweenness centrality
Stucont_bw<- betweenness(Stucont, directed = FALSE)
V(Stucont)$betweenness<-Stucont_bw
V(Stucont)$betweenness
which.max(Stucont_bw)
DF<-as.data.frame(V(Stucont))
DF<-as_long_data_frame(Stucont)


#================== Rough Visualization =====================#
library(RColorBrewer)
pal<-brewer.pal(length(unique(V(Stucont)$Class)), "Set3")
plot(Stucont,edge.color = 'black',vertex.label.cex =0.5, 
     vertex.color=pal[as.numeric(as.factor(vertex_attr(Stucont, "Class")))],
     vertex.size = sqrt(Stucont_ind)/3, edge.width=sqrt(E(Stucont)$weight/800),
     layout = layout.fruchterman.reingold)
plot(Stucont,edge.color = 'black',vertex.label.cex =0.5, 
     vertex.color=pal[as.numeric(as.factor(vertex_attr(Stucont, "Class")))],
     vertex.size = sqrt(Stucont_bw)/3, edge.width=sqrt(E(Stucont)$weight/800),
     layout = layout.fruchterman.reingold)
     
